// pkg/auth/oauth2/advanced.go
package oauth2

import (
	"context"
	"net/http"
	"time"
)

// AdvancedOAuth2Tester performs comprehensive OAuth2 security testing
type AdvancedOAuth2Tester struct {
	client         *http.Client
	baseURL        string
	clientID       string
	clientSecret   string
	redirectURI    string
	logger         Logger
	results        []TestResult
	supportedFlows []string
	discoveryDoc   *DiscoveryDocument
}

// TestResult represents a security test result
type TestResult struct {
	TestName    string                 `json:"test_name"`
	TestType    string                 `json:"test_type"`
	Severity    string                 `json:"severity"`
	Passed      bool                   `json:"passed"`
	Message     string                 `json:"message"`
	Details     map[string]interface{} `json:"details"`
	Remediation string                 `json:"remediation"`
	References  []string               `json:"references"`
	Timestamp   time.Time              `json:"timestamp"`
}

// DiscoveryDocument represents OAuth2/OIDC discovery document
type DiscoveryDocument struct {
	Issuer                            string   `json:"issuer"`
	AuthorizationEndpoint             string   `json:"authorization_endpoint"`
	TokenEndpoint                     string   `json:"token_endpoint"`
	UserInfoEndpoint                  string   `json:"userinfo_endpoint"`
	JwksURI                           string   `json:"jwks_uri"`
	ResponseTypesSupported            []string `json:"response_types_supported"`
	GrantTypesSupported               []string `json:"grant_types_supported"`
	CodeChallengeMethodsSupported     []string `json:"code_challenge_methods_supported"`
	TokenEndpointAuthMethodsSupported []string `json:"token_endpoint_auth_methods_supported"`
}

// NewAdvancedOAuth2Tester creates a new advanced OAuth2 tester
func NewAdvancedOAuth2Tester(config OAuth2Config, logger Logger) *AdvancedOAuth2Tester {
	return &AdvancedOAuth2Tester{
		client: &http.Client{
			Timeout: 30 * time.Second,
			CheckRedirect: func(req *http.Request, via []*http.Request) error {
				return http.ErrUseLastResponse // Don't follow redirects
			},
		},
		baseURL:      config.BaseURL,
		clientID:     config.ClientID,
		clientSecret: config.ClientSecret,
		redirectURI:  config.RedirectURI,
		logger:       logger,
		results:      []TestResult{},
	}
}

// RunComprehensiveTests runs all OAuth2 security tests
func (t *AdvancedOAuth2Tester) RunComprehensiveTests(ctx context.Context) ([]TestResult, error) {
	t.logger.Info("Starting comprehensive OAuth2 security testing", "target", t.baseURL)

	// Discover OAuth2 configuration
	if err := t.discoverConfiguration(ctx); err != nil {
		t.logger.Error("Failed to discover OAuth2 configuration", "error", err)
	}

	// Test categories
	testSuites := []func(context.Context) error{
		t.testAuthorizationCodeVulnerabilities,
		t.testPKCEImplementation,
		t.testJWTVulnerabilities,
		t.testRedirectURIValidation,
		t.testStateParameterSecurity,
		t.testTokenEndpointSecurity,
		t.testCrossClientAttacks,
		t.testImplicitFlowSecurity,
	}

	for _, testSuite := range testSuites {
		if err := testSuite(ctx); err != nil {
			t.logger.Error("Test suite failed", "error", err)
		}
	}

	return t.results, nil
}

// testAuthorizationCodeVulnerabilities tests for authorization code vulnerabilities
func (t *AdvancedOAuth2Tester) testAuthorizationCodeVulnerabilities(ctx context.Context) error {
	t.logger.Info("Testing authorization code vulnerabilities")

	// Test 1: Authorization Code Replay
	t.testAuthorizationCodeReplay(ctx)

	// Test 2: Authorization Code Injection
	t.testAuthorizationCodeInjection(ctx)

	// Test 3: Code Substitution
	t.testCodeSubstitution(ctx)

	// Test 4: Code Leakage via Referer
	t.testCodeLeakageViaReferer(ctx)

	return nil
}

// testAuthorizationCodeReplay tests if authorization codes can be replayed
func (t *AdvancedOAuth2Tester) testAuthorizationCodeReplay(ctx context.Context) {
	testName := "Authorization Code Replay Attack"
	t.logger.Debug("Testing authorization code replay")

	// Generate authorization request
	state := generateRandomString(32)
	authURL := t.buildAuthorizationURL(map[string]string{
		"response_type": "code",
		"client_id":     t.clientID,
		"redirect_uri":  t.redirectURI,
		"state":         state,
		"scope":         "openid profile",
	})

	// Note: In a real test, you would need to:
	// 1. Automate the authorization flow to get a real code
	// 2. Exchange the code for tokens
	// 3. Try to reuse the same code

	// For demonstration, we'll test the token endpoint behavior
	code := "test_authorization_code"

	// First exchange
	tokenResp1, err := t.exchangeCodeForToken(ctx, code)
	if err != nil {
		// If we can't get a token, we can't test replay
		t.addResult(TestResult{
			TestName: testName,
			TestType: "Authorization Code Security",
			Severity: "INFO",
			Passed:   true,
			Message:  "Could not test code replay (no valid code available)",
			Details: map[string]interface{}{
				"reason": err.Error(),
			},
			Timestamp: time.Now(),
		})
		return
	}

	// Second exchange (replay attempt)
	tokenResp2, err := t.exchangeCodeForToken(ctx, code)

	if err == nil && tokenResp2 != nil {
		t.addResult(TestResult{
			TestName: testName,
			TestType: "Authorization Code Security",
			Severity: "HIGH",
			Passed:   false,
			Message:  "Authorization code can be replayed",
			Details: map[string]interface{}{
				"first_token":  tokenResp1,
				"replay_token": tokenResp2,
			},
			Remediation: "Ensure authorization codes are single-use and expire after first use",
			References: []string{
				"https://tools.ietf.org/html/rfc6749#section-4.1.2",
				"https://oauth.net/2/security-best-current-practice/#authorization-code-replay",
			},
			Timestamp: time.Now(),
		})
	} else {
		t.addResult(TestResult{
			TestName:  testName,
			TestType:  "Authorization Code Security",
			Severity:  "HIGH",
			Passed:    true,
			Message:   "Authorization codes cannot be replayed",
			Timestamp: time.Now(),
		})
	}
}

// testPKCEImplementation tests PKCE implementation
func (t *AdvancedOAuth2Tester) testPKCEImplementation(ctx context.Context) error {
	t.logger.Info("Testing PKCE implementation")

	// Test 1: PKCE Downgrade Attack
	t.testPKCEDowngrade(ctx)

	// Test 2: Invalid PKCE Verifier
	t.testInvalidPKCEVerifier(ctx)

	// Test 3: PKCE Required for Public Clients
	t.testPKCERequirement(ctx)

	// Test 4: Code Challenge Methods
	t.testCodeChallengeMethods(ctx)

	return nil
}

// testPKCEDowngrade tests if PKCE can be downgraded
func (t *AdvancedOAuth2Tester) testPKCEDowngrade(ctx context.Context) {
	testName := "PKCE Downgrade Attack"
	t.logger.Debug("Testing PKCE downgrade")

	// Generate PKCE parameters
	codeVerifier := generateCodeVerifier()
	codeChallenge := generateCodeChallenge(codeVerifier)

	// Test 1: Request with PKCE, exchange without
	state := generateRandomString(32)
	authURL := t.buildAuthorizationURL(map[string]string{
		"response_type":         "code",
		"client_id":             t.clientID,
		"redirect_uri":          t.redirectURI,
		"state":                 state,
		"code_challenge":        codeChallenge,
		"code_challenge_method": "S256",
	})

	t.logger.Info("PKCE downgrade test completed", "test", testName)
}
